name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

jobs:
  build:
    env:
      CC: ${{ matrix.c_compiler }}
      CXX: ${{ matrix.cxx_compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, RelWithDebInfo]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cxx_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cxx_compiler: g++-14
          - os: ubuntu-latest
            c_compiler: clang
            cxx_compiler: clang++-18
            # hopefully this targets apple clang
          - os: macos-latest
            c_compiler: clang
            cxx_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: cl
    steps:
      - if: runner.os == 'Windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v4

      - name: Set build directory
        id: strings
        shell: bash
        run: >
          if [[ "${{ matrix.build_type }}" == "Debug" ]]; then
            echo "build-output-dir=${{ github.workspace }}/build/dev" >> "$GITHUB_OUTPUT"
          else
            echo "build-output-dir=${{ github.workspace }}/build/rel" >> "$GITHUB_OUTPUT"
          fi

      - name: Install python
        uses: actions/setup-python@v5
        with: { python-version: "3.13" }

      - name: Install conan
        run: pip3 install conan

      - name: Get conan dot directory
        id: conan-dot
        shell: bash
        run: |
          echo "conan-dotdir=$(conan config home)" >> "$GITHUB_OUTPUT"

      - name: Cache installed dependencies
        id: cache-conan
        uses: actions/cache@v4
        env:
          CONAN_DOTDIR: ${{ steps.conan-dot.outputs.conan-dotdir }}
        with:
          path: ${{ steps.conan-dot.outputs.conan-dotdir }}
          key: conan-cache-${{ runner.os }}-${{ hashFiles('**/conan.lock') }}

      - name: Setup conan profile
        if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        run: |
          conan profile detect -f

      - name: Install conan dependencies
        run: |
          conan install . -s compiler="$CC"\
                -s compiler.cppstd=20 \
                -c tools.cmake.cmaketoolchain:generator=Ninja
                build_type=${{ matrix.build_type }} -b missing

      - name: Activate conan env (Windows)
        if: runner.os == 'Windows'
        run: ${{ github.workspace }}\conan\conanbuild.bat

      - name: Activate conan env (Unix)
        if: runner.os != 'Windows'
        run: source ${{ github.workspace }}/conan/conanbuild.sh

      - name: Configure build
        shell: bash
        run: >
          if [[ "${{ matrix.build_type }}" == "Debug" ]]; then
            cmake --preset=dev-ci -G Ninja
          else
            cmake --preset=release-ci -G Ninja
          fi

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        run: ctest --test-dir ${{ steps.strings.outputs.build-output-dir }} --build-config ${{ matrix.build_type }}
